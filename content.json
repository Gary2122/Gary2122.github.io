{"posts":[{"title":"第一篇博客当然是HELLO WORLD","text":"","link":"/2024/02/15/hello-world/"},{"title":"My New Post","text":"","link":"/2024/02/15/My-New-Post/"},{"title":"歌词滚动效果的实现","text":"话不多说，先看效果图： 歌词随着时间进行变化，那这种效果我们应该怎么去做呢？实现的思路又是怎样的呢？ 1.先找需要的材料我把材料发放在了网盘里，大家通过链接获取，里面有对应的 mp3 文件及数据 链接：https://pan.baidu.com/s/1RdDty0ctUl3k-7o-43-0nw?pwd=388p提取码：388p 2，对得到的资料进行分析，进行数据处理 这个是我们获取到的数据，由于我是在 vue2 项目里面做的，所以我用了 export 将需要的数据引出，然后在对应的页面进行处理 那么问题来了：我们需要的数据是什么？什么样的数据我们才能让歌词与时间联系起来？ answer：其实就是歌词对应在 MP3 文件中对应的播放时间，所以我们需要获取对应歌曲每句歌词所对应的时间 接下来，我们在对应的文件中引入我们歌曲数据 1import lrcSong from &quot;../assets/js/song&quot;; 然后对取到的数据进行处理：将取到的歌词数据变成对象数组 对于取到的数据，我们只需要 lyric 部分，这部分是每句歌词对应的时间的字符串 由于我们取到的数据是字符串形式的，所以需要对字符串进行拆分，理由很简单，我们最后需要的数据是字符数组的形式 所以parseLrc(lrcSong)函数是对取到的数据变换成对象数组的函数，其中调用了parseTime函数，这个函数是我们用来将字符串的时间转换成秒数的格式， 1234567891011121314151617181920212223parseLrc(lrcSong) { let songdata = lrcSong.parseLrc(lrcSong) { let songdata = lrcSong.lyric; let songArr = songdata.split(&quot;\\n&quot;); let result = []; for (var i = 0; i &lt; songArr.length; i++) { // console.log(songArr[i]); let str = songArr[i]; var parts = str.split(&quot;]&quot;); let timeStr = parts[0].substring(1); let obj = { time: this.parseTime(timeStr), words: parts[1] }; result.push(obj); } this.song = result; //我们最后需要的数组对象，如果用纯js的话，那就直接return就行，最后找个变量接收 }, // 处理时间问题 parseTime(time) { let resultArr = time.split(&quot;:&quot;); return +resultArr[0] * 60 + +resultArr[1]; }, 通过这两个函数对数据的处理，我们最后得到了一个对象数组，打印出来是这样的： 3.联系 dom 元素，将歌词填充到 dom 元素里面HTML 的代码 12345678910&lt;div&gt; &lt;!-- 这种做法不能播放 --&gt; &lt;!-- &lt;audio src=&quot;../assets/1480251493.mp3&quot; controls&gt;&lt;/audio&gt; --&gt; &lt;audio controls&gt; &lt;source src=&quot;../assets/1480251493.mp3&quot; /&gt; &lt;/audio&gt; &lt;div class=&quot;container&quot;&gt; &lt;ul&gt;&lt;/ul&gt; &lt;/div&gt;&lt;/div&gt; 注：先开始写的时间第一中 audio 的写法不能播放，第二种写法就可以，实战的时候需要注意一下 我们将处理好的数据放入到对应的 dom 元素里面 所以我们先获取 dom 元素 12345678getDom() { let tempdom = { audio: document.querySelector(&quot;audio&quot;), ul: document.querySelector(&quot;.container ul&quot;), container: document.querySelector(&quot;.container&quot;) }; this.doms = tempdom;//如果用纯js的话，那就直接return就行，最后找个变量接收 }, 这样的话，我们就获取到了我们的 dom 元素，下一步就是将歌词填充到对应的 ul 标签 12345678910111213// 创建歌词元素 createLi() { // 为了提高效率，采用文档片段，因为这种做法不涉及reflow，对浏览器渲染主线程不影响 let temp = document.createDocumentFragment(); let data = this.song; for (var i = 0; i &lt; data.length; i++) { let li = document.createElement(&quot;li&quot;); li.textContent = data[i].words; console.log(data[i].words); temp.appendChild(li); } this.doms.ul.appendChild(temp); }, 通过这种方法我们就将歌词填充到了 ul 标签中这样我们就可以看到 ul 里面 li 了 样式代码： 1234567891011121314151617181920212223242526* { margin: 0; padding: 0;}body { background-color: #000000; color: #666; text-align: center;}audio { width: 420px; margin: 30px 0;}.container { overflow: hidden; height: 420px;}.container ul { transition: 0.8s; list-style: none;}.container li { height: 30px; line-height: 30px; transition: 0.2s;} 现在我们将歌词放入到 ul 标签了，最后一步也就是最重要的，我们如何与 mp3 文件进行联系，形成滚动效果呢？ 4.将歌词与时间联系起来首先我们需要完成一个工作，就是需要知道什么时间到了哪句歌词 1234567891011// 看歌词到了那个位置 findindex() { let data = this.song; let currentTime = this.doms.audio.currentTime; for (var i = 0; i &lt; data.length; i++) { if (currentTime &lt; data[i].time) { return i - 1; } } return data.length - 1; }, 让 audio 当前播放时间与处理好的数据进行对比，获取对应的 index，这样我们就知道当前唱到了第几局句歌词 我们获取到了第几句歌词之后，我们就对歌词进行样式渲染了，就实现我们想要的滚动效果了 在实现这个之间，我们需要思考一个问题，滚动的效果是怎么实现的呢？ 看这张图，我们可以知道，其实就是 ul 标签的滚动，container 位置不进行变化，让 ul 标签向上移动，使得两个元素产生相对移动，形成这种滚动的效果，所以我们对于偏移值的把握是十分重要的 1234567891011121314151617181920212223setOffsetAndliStyle() { let containerHeight = this.doms.container.clientHeight; let liheight = this.doms.ul.children[0].clientHeight; let index = this.findindex(); let maxOffset = this.doms.ul.clientHeight - containerHeight; let offset = liheight * index + liheight / 2 - containerHeight / 2; if (offset &lt; 0) { offset = 0; } if (offset &gt; maxOffset) { offset = maxOffset; } let li = this.doms.ul.querySelector(&quot;.active&quot;); if (li) { li.classList.remove(&quot;active&quot;); } li = this.doms.ul.children[index]; if (li) { li.classList.add(&quot;active&quot;); } console.log(offset); this.doms.ul.style.transform = `translateY(-${offset}px)`; }, 当我们实现 ul 移动的时候，移动的多少是一个问题，还要考虑对应的临界值 偏移值的计算： 蓝线就是代表当前高亮显示的标签到 ul 元素顶部的距离 1liheight * index + liheight / 2 棕线就是代表container 元素的一半 这样我们就可以计算出偏移值了 1let offset = liheight * index + liheight / 2 - containerHeight / 2; 但现在还没有结束，我们还需要对偏移值判断 123456if (offset &lt; 0) { offset = 0;}if (offset &gt; maxOffset) { offset = maxOffset;} 这里面的 maxOffset 是最大的偏移值，代表到了最后一句歌词的位置不能上移了，凭个人喜好，加不加都可 那么我们就差最后一步对li 标签的渲染了 12345678let li = this.doms.ul.querySelector(&quot;.active&quot;);if (li) { li.classList.remove(&quot;active&quot;);}li = this.doms.ul.children[index];if (li) { li.classList.add(&quot;active&quot;);} active 样式 1234.container li.active { color: #fff; transform: scale(1.4);} 这样我们就做好歌词的滚动效果了！下面是我的源码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152&lt;template&gt; &lt;div&gt; &lt;!-- &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; --&gt; &lt;!-- 这种做法不能播放 --&gt; &lt;!-- &lt;audio src=&quot;../assets/1480251493.mp3&quot; controls&gt;&lt;/audio&gt; --&gt; &lt;audio controls&gt; &lt;source src=&quot;../assets/1480251493.mp3&quot; /&gt; &lt;/audio&gt; &lt;div class=&quot;container&quot;&gt; &lt;ul&gt;&lt;/ul&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import lrcSong from &quot;../assets/js/song&quot;;export default { name: &quot;HelloWorld&quot;, data() { return { song: [], doms: {}, currentIndex: -1, }; }, mounted() { this.parseLrc(lrcSong); this.getDom(); this.createLi(); this.audioStart(); }, methods: { parseLrc(lrcSong) { let songdata = lrcSong.lyric; let songArr = songdata.split(&quot;\\n&quot;); let result = []; for (var i = 0; i &lt; songArr.length; i++) { // console.log(songArr[i]); let str = songArr[i]; var parts = str.split(&quot;]&quot;); let timeStr = parts[0].substring(1); let obj = { time: this.parseTime(timeStr), words: parts[1], }; result.push(obj); } this.song = result; console.log(this.song); }, // 处理时间问题 parseTime(time) { let resultArr = time.split(&quot;:&quot;); return +resultArr[0] * 60 + +resultArr[1]; }, // 获取dom getDom() { let tempdom = { audio: document.querySelector(&quot;audio&quot;), ul: document.querySelector(&quot;.container ul&quot;), container: document.querySelector(&quot;.container&quot;), }; this.doms = tempdom; }, // 创建歌词元素 createLi() { // 为了提高效率，采用文档片段，因为这种做法不涉及reflow，对浏览器渲染主线程不影响 let temp = document.createDocumentFragment(); let data = this.song; for (var i = 0; i &lt; data.length; i++) { let li = document.createElement(&quot;li&quot;); li.textContent = data[i].words; console.log(data[i].words); temp.appendChild(li); } this.doms.ul.appendChild(temp); }, // 看歌词到了那个位置 findindex() { let data = this.song; let currentTime = this.doms.audio.currentTime; for (var i = 0; i &lt; data.length; i++) { if (currentTime &lt; data[i].time) { return i - 1; } } return data.length - 1; }, setOffsetAndliStyle() { let containerHeight = this.doms.container.clientHeight; let liheight = this.doms.ul.children[0].clientHeight; let index = this.findindex(); let maxOffset = this.doms.ul.clientHeight - containerHeight; let offset = liheight * index + liheight / 2 - containerHeight / 2; if (offset &lt; 0) { offset = 0; } if (offset &gt; maxOffset) { offset = maxOffset; } let li = this.doms.ul.querySelector(&quot;.active&quot;); if (li) { li.classList.remove(&quot;active&quot;); } li = this.doms.ul.children[index]; if (li) { li.classList.add(&quot;active&quot;); } console.log(offset); this.doms.ul.style.transform = `translateY(-${offset}px)`; }, audioStart() { this.doms.audio.addEventListener(&quot;timeupdate&quot;, this.setOffsetAndliStyle); }, },};&lt;/script&gt;&lt;!-- Add &quot;scoped&quot; attribute to limit CSS to this component only --&gt;&lt;style&gt;* { margin: 0; padding: 0;}body { background-color: #000000; color: #666; text-align: center;}audio { width: 420px; margin: 30px 0;}.container { overflow: hidden; height: 420px; /* border: 2px solid #fff; */}.container ul { transition: 0.8s; list-style: none;}.container li { height: 30px; line-height: 30px; transition: 0.2s;}.container li.active { color: #fff; transform: scale(1.4);}&lt;/style&gt; 这个 demo 是结合 vue2 做的，如果用纯 js 做的同学简单改一下变量就可以，里面的方法思路都是适用的~","link":"/2024/02/21/1-gd/"},{"title":"歌词滚动效果的实现","text":"话不多说，先看效果图：","link":"/2024/02/21/test/"}],"tags":[{"name":"CSS","slug":"CSS","link":"/tags/CSS/"}],"categories":[{"name":"效果实现","slug":"效果实现","link":"/categories/%E6%95%88%E6%9E%9C%E5%AE%9E%E7%8E%B0/"}],"pages":[{"title":"Vue","text":"{% vueComponent helloWorld %}","link":"/vue/index.html"}]}